package com.virtualpairprogrammers;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.spark.sql.Column;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.RowFactory;
import org.apache.spark.sql.SparkSession;
import org.apache.spark.sql.functions;

import static org.apache.spark.sql.functions.*; //now we dont have to explicitly refer to .functions()
import org.apache.spark.sql.types.DataTypes;
import org.apache.spark.sql.types.Metadata;
import org.apache.spark.sql.types.StructField;
import org.apache.spark.sql.types.StructType;


public class Lesson75 {
	
/* Lesson 74 Using more than one parameter in UDF
 */
	
	@SuppressWarnings("resource") 
	public static void main(String[] args) {
		System.setProperty("hadoop.home.dir", "c:/hadoop");
		Logger.getLogger("org.apache").setLevel(Level.WARN);
	
		SparkSession spark = SparkSession.builder().appName("testingSql").master("local[*]")
				.config("spark.sql.warehouse.dir", "file:///c:/tmp/")
				.getOrCreate();
				
		Dataset<Row> dataset = spark.read().option("header", true).csv("Src/main/resources/exams/students.csv"); 
		
//BEFORE
//		dataset = dataset.withColumn("pass", lit( col("grade").equalTo("A+")  ));
		
//UDF
		spark.udf().register("hasPassed", (String grade) ->  grade.equals("A+"),  DataTypes.BooleanType); //modern java code implementation with lambda. Dont use .equalTo use .equals

/* The fcn `hasPassed` should now be registered in Spark. We can use this in SQL syntax, java api or whichever. Can use with calling .mean(), .avg() fcns. 
 * lets test if it works. Call the UDF with the fcn callUDF() first param is name of fcn we call and second is which cols are we passing as input
 */
		dataset = dataset.withColumn("pass", callUDF("hasPassed", col("grade") )); //and it works
		

		dataset.show(100); 
		
		spark.close();
	
	}
}
