//Lesson 21
package com.virtualpairprogrammers;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;

import scala.Tuple2; 

public class Lesson21 {

	public static void main(String[] args) {
		
//Lesson 21 Reading from Disk
//so far we have been working with hard coded data from a java collection. Good for spark fundamentals
		
		System.setProperty("hadoop.home.dir", "c:/hadoop"); //i explain this later in the code
		
		List<String> inputData = new ArrayList<>();
		inputData.add("WARN: Tuesday 4 September 0405"); 
		inputData.add("ERROR: Tuesday 4 September 0408"); 
		inputData.add("FATAL: Wednesday 5 September 1632"); 
		inputData.add("ERROR: Friday 7 September 1854"); 
		inputData.add("WARN: Saturday 8 September 1942"); 

		Logger.getLogger("org.apache").setLevel(Level.WARN); 
		
		SparkConf conf = new SparkConf().setAppName("startingSpark").setMaster("local[*]"); 
		JavaSparkContext sc = new JavaSparkContext(conf);

		JavaRDD<String> sentences = sc.parallelize(inputData); //first make an RDD out of our input which rn are sentences
		
		JavaRDD<String> words = sentences.flatMap( value -> Arrays.asList(value.split(" ")).iterator()); //will convert into a regular list of strings. Standard java. Next compile error we see is
		
		JavaRDD<String> filteredWords = words.filter(word -> word.length() > 1); //magic happens here. Filter iterates around every element, which are now single words. SO given a word, if return true
	
		filteredWords.foreach(System.out::println);

		

		sc.close();
	}

}
