//Lesson 12
package com.virtualpairprogrammers;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;

public class Lesson12 {

	public static void main(String[] args) {

		List<Integer> inputData = new ArrayList<>(); //arraylist can assume it will be integer as we defined first where the List is
		
		inputData.add(35); 
		inputData.add(12);
		inputData.add(90);
		inputData.add(20);
		
		Logger.getLogger("org.apache").setLevel(Level.WARN); 
		
		SparkConf conf = new SparkConf().setAppName("startingSpark").setMaster("local[*]"); 
		JavaSparkContext sc = new JavaSparkContext(conf);
		
/* Lesson 12 Tuples. THis is not spark specific, the concept is originally from scala. Example of tuple - lets say we have the requirement to store these integers in the RDD
 * but we need to store their corresponding sqrt (need both sets of data)
 * 
 */
		
		JavaRDD<Double> myRdd = sc.parallelize(inputData); 
		
		
		Double result = myRdd.reduce(( value1,value2 ) -> value1 + value2);
		
	
		System.out.println(result);
		

		JavaRDD<Integer> myRdd2 = sc.parallelize(inputData2); 
		
		JavaRDD<Double> sqrtRdd = myRdd2.map( value -> Math.sqrt(value)); 

		sqrtRdd.collect().forEach( System.out::println ); 

		
		System.out.println(sqrtRdd.count()); 

		JavaRDD<Long> singleIntegerRdd = sqrtRdd.map( value -> 1L); 
		Long count = singleIntegerRdd.reduce((value1, value2) -> value1 + value2); 
		System.out.println(count); //prints 4
		
		
		sc.close();
	}

}
