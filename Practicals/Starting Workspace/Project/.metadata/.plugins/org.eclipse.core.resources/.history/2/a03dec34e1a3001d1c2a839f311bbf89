package com.virtualpairprogrammers;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SparkSession;


public class Lesson63 {
	
/* Lesson 63 In Memory Data
 * Recall that we used the parallelize method to initialize a java RDD with basic in-memory data that was seeded from a list. When working up a query, may be useful to have
 * a set of hardcoded data in memory data like what we did with RDD. Thats how we could make up a unit test 
 */
	
	@SuppressWarnings("resource") 
	public static void main(String[] args) {
		System.setProperty("hadoop.home.dir", "c:/hadoop");
		Logger.getLogger("org.apache").setLevel(Level.WARN);
	
		SparkSession spark = SparkSession.builder().appName("testingSql").master("local[*]")
				.config("spark.sql.warehouse.dir", "file:///c:/tmp/")
				.getOrCreate();
		
		Dataset<Row> dataset = spark.read().option("header",  true).csv("src/main/resources/exams/students.csv");


		dataset.createOrReplaceTempView("my_students_table");

		Dataset<Row> results = spark.sql("select * from my_students_table where subject = 'French' "); //returns a dataset of rows
		results.show();


		Dataset<Row> results1 = spark.sql("select score, year from my_students_table where subject = 'French' "); //ultimately we are sitting on an RDD.
		results1.show();
		
		
		Dataset<Row> results2 = spark.sql("Select max(score) from my_students_table where subject = 'French' ");
		results2.show();

		
		//we can do avg for average and it knows it wont be whole num so it auto converts scores to double
		Dataset<Row> results3 = spark.sql("select avg(score) from my_students_table where subject = 'French' ");
		results3.show();
		
		Dataset<Row> results4 = spark.sql("select distinct(year) from my_students_table order by year"); //previous was in random order, use order by to put in order
		results4.show();
		


//		spark.close(); //close method on spark session unsure why not compiling
	
	}
}
