package com.virtualpairprogrammers;

//importing all static functions 
import static org.apache.spark.sql.functions.col;
import static org.apache.spark.sql.functions.when;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.spark.ml.evaluation.RegressionEvaluator;
import org.apache.spark.ml.feature.OneHotEncoderEstimator;
import org.apache.spark.ml.feature.StringIndexer;
import org.apache.spark.ml.feature.VectorAssembler;
import org.apache.spark.ml.param.ParamMap;
import org.apache.spark.ml.regression.LinearRegression;
import org.apache.spark.ml.regression.LinearRegressionModel;
import org.apache.spark.ml.tuning.ParamGridBuilder;
import org.apache.spark.ml.tuning.TrainValidationSplit;
import org.apache.spark.ml.tuning.TrainValidationSplitModel;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SparkSession;

public class Lesson110 {

/* Lesson 110 Case Study Walkthrough Part 2
 * 
 * Lets now create the final vector of features and get data in right format
 */
	
	public static void main(String[] args) { 
		
		System.setProperty("hadoop.home.dir", "c:/hadooop"); 
		Logger.getLogger("org.apache").setLevel(Level.WARN);
		
		SparkSession spark = SparkSession.builder()
				.appName("VPP Chapter Views")
				.config("spark.sql.warehouse.dir", "file:///c:/tmp/")
				.master("local[*]")
				.getOrCreate();
		
		Dataset<Row> csvData = spark.read()
				.option("header",  true)
				.option("inferSchema", true)
				.csv("src/main/resources/vppChapterViews/*.csv");  
		
//		csvData.show(); //after reading in looks good. Lets keep checking as we go.

		csvData = csvData.filter("is_cancelled = false").drop("observation_date","is_cancelled"); //using sql syntax and drop our unneeded cols
//		csvData.show(); //looks good, we dont have the two cols we dropped so should be good now
		
//next get rid of nulls. using when fcn, first param is boolean. When firstSub is NULL, turn into 0. OTHERWISE we can leave firstSub as is since it will be a 1.
		csvData = csvData.withColumn("firstSub", when( col("firstSub").isNull(), 0 ).otherwise(col("firstSub")) ) //do the same thing for the other three cols
				.withColumn("all_time_views", when (col("all_time_views").isNull(), 0).otherwise(col("all_time_views"))) 
				.withColumn("last_month_views", when (col("last_month_views").isNull(), 0).otherwise(col("last_month_views")))
				.withColumn("next_month_views", when (col("next_month_views").isNull(), 0).otherwise(col("next_month_views")));


		csvData = csvData.withColumnRenamed("next_month_views", "label");
		
// Next let us deal with the cateogry columns. We want to encode them. Lets start with payment method type. First thing is to index it
		StringIndexer payMethodIndexer = new StringIndexer(); 
		csvData = payMethodIndexer.setInputCol("payment_method_type")
			.setOutputCol("payIndex")
			.fit(csvData)
			.transform(csvData);
		
		StringIndexer countryIndexer = new StringIndexer();
		csvData = countryIndexer.setInputCol("country")
				.setOutputCol("countryIndex")
				.fit(csvData)
				.transform(csvData);
		
		StringIndexer periodIndexer = new StringIndexer();
		csvData = periodIndexer.setInputCol("rebill_period_in_months")
				.setOutputCol("periodIndex")
				.fit(csvData)
				.transform(csvData);
		
//after indexing lets create the oneHotCoderEstimator to encode
		
		OneHotEncoderEstimator encoder = new OneHotEncoderEstimator();
		encoder.setInputCols(new String[] {"payIndex", "countryIndex", "periodIndex"})
			.setOutputCols(new String[] {"payVector", "countryVector", "periodVector"})
			.fit(csvData).transform(csvData);
		
//		csvData.show(); //so far looking good, we expect to see additional cols at the end
		
		
/* **************** Lesson 110, Part 2 starts here
 * 
 * Lets now create the final vector of features. We'll create a new data set and call it input data
 */
		VectorAssembler vectorAssembler = new VectorAssembler();  //next setup input cols
		Dataset<Row> inputData = vectorAssembler.setInputCols(new String[] {"firstSub","age","all_time_views","last_month_views",
				"payVector","countrVector","periodVector"}) 
			.setOutputCol("features")
			.transform(csvData).select("label", "features"); //we ONLY want our two cols of label and features
		
//		inputData.show();
/* label | features
 * 0     | (71, [0,1,2,4,6,68...
 * ...
 * 
 * Good it works. features is clearly a vector. Label is a number. Lets build the model now with parameter grid. We want separate holdout data. Lets split for training and testing.
 */
		
		Dataset<Row>[] trainAndHoldoutData = inputData.randomSplit(new double[] {0.9, 0.1}); //90% 10% split.
		Dataset<Row> trainAndTestData = trainAndHoldoutData[0];
		Dataset<Row> holdOutData = trainAndHoldoutData[1];

		LinearRegression lr = new LinearRegression(); 
		
		ParamGridBuilder pgb = new ParamGridBuilder();
		ParamMap[] paramMap = pgb.addGrid(lr.regParam(), new double[] {0.01, 0.1, 0.3, 0.5, 0.7, 1}) //wide range of parameters. Unsure if all will work but we'll find out soon when we run this
		   .addGrid(lr.elasticNetParam(), new double[] {0,0.5,1})
		   .build();
		
//create train validation split
		
		TrainValidationSplit tvs = new TrainValidationSplit();
		tvs.setEstimator(lr)
		   .setEvaluator(new RegressionEvaluator().setMetricName("r2"))
		   .setEstimatorParamMaps(paramMap)
		   .setTrainRatio(0.9);
		
//last thing is to run our train validation split process.
		
		TrainValidationSplitModel model = tvs.fit(trainAndTestData);
		
// lets find out how well it worked, extract linear regression model
		
		LinearRegressionModel lrModel = (LinearRegressionModel)model.bestModel(); //ensure to cast model as LinearRegressionModel
		
	}
}