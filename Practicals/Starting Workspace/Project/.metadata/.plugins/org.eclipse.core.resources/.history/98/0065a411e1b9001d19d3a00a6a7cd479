package com.virtualpairprogrammers;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.spark.SparkConf;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;

public class Lesson125 {

/* Lesson 125 Stream Transformation
 * 
 * Lets show how we
 * 
 */
	
	@SuppressWarnings("resource") 
	public static void main(String[] args) {
		System.setProperty("hadoop.home.dir", "c:/hadoop"); 
		Logger.getLogger("org.apache").setLevel(Level.WARN); 
	
		SparkConf conf = new SparkConf().setMaster("local[*]").setAppName("startingSpark");
		
/* we need a java streaming context objec. Next in the javastreamingcontext we need to specify how big the batches will be. If we have slow stream of data, dont have to make it 1 second
 * Smaller batch size will result in continuous stream of results. If we have 1 hour between each one, we will see results every hour even tho constantly recieving data. lets do 30 seconds
 */
		JavaStreamingContext sc = new JavaStreamingContext(conf, Durations.seconds(30));//sc for spark context usually called jsc but thats kinda ugly
		
/* Make sure to pick correct Duration, its in java.time and its in scala. So import the spark.streaming version. Import java streaming context with CTRL SHIFT O as well.
 * 
 * On the streaming context obj we have various methods to connect to a streaming source. Idea is to go to prod standard system like kafka (will look at next section). The built in
 * options are mainly for testing and streaming. .fileStream() may be useful in practice. .queueStream() sounds like we can connect to a messenger but its just a java collection from the java.util
 * package. We can add elements to the collection and then it becomes the contents of the stream. We are looking for socket stream. Several versions. Our socket is a stream of text
 * so rawSocketStream() may not help. Lets use socketTextStream()
 */
		JavaReceiverInputDStream inputData = sc.socketTextStream("localhost", 8989);
	}
}