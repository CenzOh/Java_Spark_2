//Lesson 18
package com.virtualpairprogrammers;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;

import scala.Tuple2; 

public class Lesson18 {

	public static void main(String[] args) {
		
// Lesson 18 Group By Key
		List<String> inputData = new ArrayList<>();
		inputData.add("WARN: Tuesday 4 September 0405"); 
		inputData.add("ERROR: Tuesday 4 September 0408"); 
		inputData.add("FATAL: Wednesday 5 September 1632"); 
		inputData.add("ERROR: Friday 7 September 1854"); 
		inputData.add("WARN: Saturday 8 September 1942"); 

		Logger.getLogger("org.apache").setLevel(Level.WARN); 
		
		SparkConf conf = new SparkConf().setAppName("startingSpark").setMaster("local[*]"); 
		JavaSparkContext sc = new JavaSparkContext(conf);
	
		
//		sc.parallelize(inputData)
//			.mapToPair( rawValue -> new Tuple2<>(rawValue.split(":")[0], 1L) )
//			.reduceByKey( (value1, value2) -> value1 + value2)
//			.foreach(tuple -> System.out.println(tuple._1 + " has " + tuple._2 + " instances"));
//This code code here is identical in operation to the code we had before. This is the normal way of writing a Scala program. Dont need to copy it since its a spark idiom so we can use the fluence api
		
//		JavaPairRDD<String, Long> pairRdd = originalLogMessages.mapToPair( rawValue -> new Tuple2<>(rawValue.split(":"[0], 1L)); //first change, exactly what we had before expressed as one line
//		JavaPairRDD<String, Long> sumsRdd = pairRdd.reduceByKey( (value1, value2) -> value1 + value2); //removed
//		sumsRdd.foreach(tuple -> System.out.println(tuple._1 + " has " + tuple._2 + " instances")); //removed

		sc.close();
	}

}
